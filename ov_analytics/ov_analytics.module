<?php

/**
 * @file
 * Drupal Oppevara Analytics module.
 */

define('OV_ANALYTICS_XAPI_ENDPOINT', 'ajax/ov_analytics/xapi');
define('OV_ANALYTICS_BATCH_SIZE', 100);

/**
 * Implements hook_js_alter().
 * Is used for any internal pages, takes advantage of Drupal JS solution
 */
function ov_analytics_js_alter() {
  drupal_add_js([
    'ovAnalytics' => [
      'endpointUrl' => base_path() . OV_ANALYTICS_XAPI_ENDPOINT,
    ],
  ], 'setting');
  drupal_add_js(drupal_get_path('module', 'ov_analytics') . '/js/ov_analytics_h5p.js');
}

/**
 * Implements hook_h5p_scripts_alter().
 * Is used solely for external (embedded) pages, those are fully unrelated to
 * the rest of Drupal JS logic
 */
function ov_analytics_h5p_scripts_alter(&$scripts, $libraries, $mode) {
  if ( $mode === 'external' ) {
    $scripts[] = (object) [
      'path' => drupal_get_path('module', 'ov_analytics') . '/js/ov_analytics_h5p_external.js',
      'version' => '?v=1.0.0',
    ];
  }
}

/**
 * Implements hook_menu().
 */
function ov_analytics_menu() {
  $items = [];
  $items['admin/config/system/oppevara/analytics'] = [
    'title' => 'Oppevara Analytics',
    'description' => 'Configure analytics and provide required settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['ov_analytics_admin_settings'],
    'access arguments' => ['administer site configuration'],
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ov_analytics.admin.inc',
  ];
  $items[OV_ANALYTICS_XAPI_ENDPOINT] = [
    'title' => 'xAPI endpoint',
    'description' => 'AJAX callback to track H5P xAPI events.',
    'type' => MENU_CALLBACK,
    'page callback' => 'ov_analytics_xapi_endpoint_view',
    'access callback' => TRUE,
  ];

  return $items;
}

/**
 * Sends statement to the LRS endpoint.
 * @param  string $action Gets added to the base endpoint URL (example: statements)
 * @param  array  $data   Statement data
 * @return mixed          Either response object of drupal_http_request() or NULL (in case configuration is not provided)
 */
function ov_analytics_send_to_lrs($action, $data) {
  $endpoint = variable_get('ov_analytics_xapi_lrs_endpoint');
  $authUser = variable_get('ov_analytics_xapi_lrs_auth_user');
  $authPassword = variable_get('ov_analytics_xapi_lrs_auth_password');

  // Fail silently if required data is not provided
  if ( !( $endpoint && $authUser && $authPassword ) ) {
    // TODO Consider throwing an exception, this would make things clearer for
    // the caller
    return NULL;
  }

  $url = $endpoint . '/' . $action;
  $basicAuth = base64_encode("$authUser:$authPassword");
  $jsonData = json_encode($data);
  $options = [
    'method' => 'POST',
    'data' => $jsonData,
    'headers' => [
      'Content-Type' => 'application/json',
      'X-Experience-API-Version' => '1.0.1',
      'Authorization' => "Basic $basicAuth",
      'Content-Length' => strlen($jsonData),
    ],
    'timeout' => 45.0,
  ];

  $response = drupal_http_request($url, $options);

  if ( isset($response->error) ) {
    $debug = [
      'request' => [
        'url' => $url,
        'count' => is_array($data) ? sizeof($data) : 1,
      ],
      'response' => [
        'code' => $response->code,
        'status' => isset($response->status_message) ? $response->status_message : '',
        'error' => $response->error,
      ]
    ];

    watchdog('ov_analytics', json_encode($debug), [], WATCHDOG_ERROR);
    db_insert('ov_analytics_statements')
      ->fields([
        'code' => $response->code,
        'status_message' => isset($response->status_message) ? $response->status_message : '',
        'error' => $response->error,
        'count' => is_array($data) ? sizeof($data) : 1,
        'data' => $jsonData,
        'created' => REQUEST_TIME,
      ])->execute();
  }

  return $response;
}

/**
 * AJAX endpoint handler for H5P xAPI statements
 */
function ov_analytics_xapi_endpoint_view() {
  if ( isset($_POST['statement']) ) {
    // TODO See if it would make sense to check for json errors
    $data = json_decode($_POST['statement'], TRUE);

    if (!$data) {
      drupal_add_http_header('Status', '400 Bad Request');
      return;
    }

    // Set timestamp as browser side one is unreliable and statement storage in
    // LRS will involve a delay
    $data['timestamp'] = date(DATE_RFC3339);

    try {
      $queue = DrupalQueue::get('ov_analytics_statements');
      $queue->createQueue();
      $queue->createItem($data);
    } catch (Exception $e) {
      watchdog('ov_analytics', $e->getTraceAsString(), [], WATCHDOG_ERROR);
      drupal_add_http_header('Status', '500 Internal Server Error');
    }
  } else {
    drupal_add_http_header('Status', '400 Bad Request');
  }
}

/**
 * Processes statements queue and creates batches to be sent to LRS.
 * Batches are added into another queue.
 * @return void
 */
function _ov_analytics_process_statements_cron() {
  $statementsQueue = DrupalQueue::get('ov_analytics_statements');
  $statementsQueue->createQueue();

  if ($statementsQueue->numberOfItems() > 0) {
    $batchesQueue = DrupalQueue::get('ov_analytics_batches');
    $batchesQueue->createQueue();

    $totalBatches = ceil($statementsQueue->numberOfItems() / OV_ANALYTICS_BATCH_SIZE);

    foreach (range(1, $totalBatches) as $batch) {
      $statements = [];
      while((sizeof($statements) < OV_ANALYTICS_BATCH_SIZE) && ($item = $statementsQueue->claimItem())) {
        $statements[] = $item->data;
        $statementsQueue->deleteItem($item);
      }
      $batchesQueue->createItem($statements);
    }
  }
}

/**
 * Implements hook_cron().
 */
function ov_analytics_cron() {
  _ov_analytics_process_statements_cron();
}

/**
 * Batch queue worker callback.
 * @param  array $data Statements data
 * @return void
 */
function _ov_analytics_process_batch($data) {
  $response = ov_analytics_send_to_lrs('statements', $data);
  // TODO See if it would make sense to release the batch if sending fails
  /*if ( isset($response->error) || is_null($response) ) {
    throw new Exception('xAPI call failed!');
  }*/
}

/**
 * Implements hook_cron_queue_info()
 * @return array Defined cron queue workers
 */
function ov_analytics_cron_queue_info() {
  $queues = [];
  $queues['ov_analytics_batches'] = [
    'worker callback' => '_ov_analytics_process_batch',
    'time' => 20 * 60, // Maximum amount of time allowed for the process to handle the queue
  ];

  return $queues;
}
